
pub use std::str::FromStr;

#[allow(non_camel_case_types)]
#[derive(Debug, PartialEq)]
pub enum KeySym {
    KEY_NONE,
    KEY_a,
    KEY_b,
    KEY_c,
    KEY_d,
    KEY_e,
    KEY_f,
    KEY_g,
    KEY_h,
    KEY_i,
    KEY_j,
    KEY_k,
    KEY_l,
    KEY_m,
    KEY_n,
    KEY_o,
    KEY_p,
    KEY_q,
    KEY_r,
    KEY_s,
    KEY_t,
    KEY_u,
    KEY_v,
    KEY_w,
    KEY_x,
    KEY_y,
    KEY_z,
    KEY_A,
    KEY_B,
    KEY_C,
    KEY_D,
    KEY_E,
    KEY_F,
    KEY_G,
    KEY_H,
    KEY_I,
    KEY_J,
    KEY_K,
    KEY_L,
    KEY_M,
    KEY_N,
    KEY_O,
    KEY_P,
    KEY_Q,
    KEY_R,
    KEY_S,
    KEY_T,
    KEY_U,
    KEY_V,
    KEY_W,
    KEY_X,
    KEY_Y,
    KEY_Z,
}

impl FromStr for KeySym {

    type Err = ();

    fn from_str(input: &str) -> Result<KeySym, Self::Err> {
        match input {
            "a" => Ok(KeySym::KEY_a),
            "b" => Ok(KeySym::KEY_b),
            "c" => Ok(KeySym::KEY_c),
            "d" => Ok(KeySym::KEY_d),
            "e" => Ok(KeySym::KEY_e),
            "f" => Ok(KeySym::KEY_f),
            "g" => Ok(KeySym::KEY_g),
            "h" => Ok(KeySym::KEY_h),
            "i" => Ok(KeySym::KEY_i),
            "j" => Ok(KeySym::KEY_j),
            "k" => Ok(KeySym::KEY_k),
            "l" => Ok(KeySym::KEY_l),
            "m" => Ok(KeySym::KEY_m),
            "n" => Ok(KeySym::KEY_n),
            "o" => Ok(KeySym::KEY_o),
            "p" => Ok(KeySym::KEY_p),
            "q" => Ok(KeySym::KEY_q),
            "r" => Ok(KeySym::KEY_r),
            "s" => Ok(KeySym::KEY_s),
            "t" => Ok(KeySym::KEY_t),
            "u" => Ok(KeySym::KEY_u),
            "v" => Ok(KeySym::KEY_v),
            "w" => Ok(KeySym::KEY_w),
            "x" => Ok(KeySym::KEY_x),
            "y" => Ok(KeySym::KEY_y),
            "z" => Ok(KeySym::KEY_z),
            "A" => Ok(KeySym::KEY_A),
            "B" => Ok(KeySym::KEY_B),
            "C" => Ok(KeySym::KEY_C),
            "D" => Ok(KeySym::KEY_D),
            "E" => Ok(KeySym::KEY_E),
            "F" => Ok(KeySym::KEY_F),
            "G" => Ok(KeySym::KEY_G),
            "H" => Ok(KeySym::KEY_H),
            "I" => Ok(KeySym::KEY_I),
            "J" => Ok(KeySym::KEY_J),
            "K" => Ok(KeySym::KEY_K),
            "L" => Ok(KeySym::KEY_L),
            "M" => Ok(KeySym::KEY_M),
            "N" => Ok(KeySym::KEY_N),
            "O" => Ok(KeySym::KEY_O),
            "P" => Ok(KeySym::KEY_P),
            "Q" => Ok(KeySym::KEY_Q),
            "R" => Ok(KeySym::KEY_R),
            "S" => Ok(KeySym::KEY_S),
            "T" => Ok(KeySym::KEY_T),
            "U" => Ok(KeySym::KEY_U),
            "V" => Ok(KeySym::KEY_V),
            "W" => Ok(KeySym::KEY_W),
            "X" => Ok(KeySym::KEY_X),
            "Y" => Ok(KeySym::KEY_Y),
            "Z" => Ok(KeySym::KEY_Z),
            _ => Err(()),
        }
    }
}

